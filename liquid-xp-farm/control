os.loadAPI("/libs/touchpoint")
os.loadAPI("/tank-control/tankAPI")

local monSide = "monitor_2"
local pedestalSide = "dm_pedestal_0"
local barrelSide = "deep_storage_unit_0"
local tankPOS = "-3,5,5"
local rednetSide = "top"
local bundledSide = "bottom"
local xpActivatorColor = colors.yellow
local growthActivatorColor = colors.brown

rednet.open(rednetSide)

local pedestal = peripheral.wrap(pedestalSide)
local barrel = peripheral.wrap(barrelSide)
local mon = peripheral.wrap(monSide)
local t = touchpoint.new(monSide)
local tankServerId = tankAPI.getServerId()
local growth = false
local auto = false
local status = false
local tank = nil

function update()
  tank = tankAPI.getTank(tankPOS, tankServerId)

  updateButtons()
end

function updateButtons()
  setActive("On", status)
  setActive("Off", not status)
  setActive("Auto", auto)
  setActive("Grow", growth)
end

function drawInfo()
  mon.setBackgroundColor(colors.black)
  mon.setCursorPos(2, 2)
  mon.write("XP: "..barrel.getStoredItems()["qty"] or 0)
  mon.setCursorPos(2, 3)
  mon.write("  of "..barrel.getMaxStoredItems() or 0)
  mon.setCursorPos(2, 5)
  mon.write("liq XP: "..tank["Amount"])
  mon.setCursorPos(2, 6)
  mon.write("  of "..tank["Capacity"])
end

function resetGrowth() 
  pedestal.pushItemIntoSlot("down",1,1,1)
  os.sleep(5)
  pedestal.pullItemIntoSlot("down",1,1,1)
end

function toggleGrowth()
  redstone.setBundledOutput(bundledSide, colors.combine(redstone.getBundledOutput(bundledSide), growthActivatorColor))
  os.sleep(.2)
  redstone.setBundledOutput(bundledSide, colors.subtract(redstone.getBundledOutput(bundledSide), growthActivatorColor))
end

function isActive(button)
  return t.buttonList[button].active
end

function setActive(button, value)
  t.buttonList[button].active = value
end

function draw()
  mon.setBackgroundColor(colors.black)
  mon.setCursorPos(1,1)
  mon.clear()

  t:draw()

  drawInfo()
end

mon.clear()
resetGrowth()

t:add("On", nil, 2, 10, 8, 13, colors.red, colors.lime)
t:add("Off", nil, 10, 10, 16, 13, colors.red, colors.lime)
t:add("Auto", nil, 2, 15, 8, 18, colors.red, colors.lime)
t:add("Grow", nil, 10, 15, 16, 18, colors.red, colors.lime)

update()
draw()

local updateTimer = os.startTimer(5)

while true do
  --# handleEvents will convert monitor_touch events to button_click if it was on a button
  local event, p1 = t:handleEvents(os.pullEvent())
  if event == "button_click" then
    if p1 == "On" then
    elseif p1 == "Off" then
    elseif p1 == "Auto" then
    elseif p1 == "Grow" then
      toggleGrowth()
      growth = not growth
    end
    update()
    draw()
  elseif event == "timer" and p1 == updateTimer then
    update()
    draw()
    updateTimer = os.startTimer(5)
  end
end